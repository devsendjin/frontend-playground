@function concatValues($values, $postfix: "px", $delimiter: " ") {
  @if (length($values) == 1) {
    @return unquote("#{$values}#{$postfix}");
  }

  $concatenated: "";
  @for $i from 1 through length($values) {
    $currentValues: nth($values, $i);
    @if (length($currentValues) > 1) {
      $concatenated: concatValues($currentValues);
    } @else {
      @if (length($values) == $i) {
        $concatenated: str-insert(
          $concatenated,
          "#{$currentValues}#{$postfix}",
          -1
        );
      } @else {
        $concatenated: str-insert(
          $concatenated,
          "#{$currentValues}#{$postfix}",
          -1
        ) + $delimiter;
      }
    }
  }

  @return unquote($concatenated)
}

// CSS Lock
@function cssLock($valueFrom, $valueTo, $sizeFrom, $sizeTo) {
  @return calc(#{$valueFrom}px + (#{$valueFrom} - #{$valueTo}) * (100vw - #{$sizeFrom}px) / (#{$sizeFrom} - #{$sizeTo}));
}

// responsiveValue
// @example
// font-size: responsiveValue(
//     $valuesFrom: (40 20),
//     $valuesTo: (30 10),
//     $sizeFrom: 768,
//     $sizeTo: 375
// );
//
// or
//
// font-size: responsiveValue(
//     $valuesFrom: (40),
//     $valuesTo: (30),
//     $sizeFrom: 768,
//     $sizeTo: 375
// );
@function responsiveValue(
  $valuesFrom: null,
  $valuesTo: null,
  $sizeFrom: null,
  $sizeTo: null
) {
  $propValue: "";

  @if (
      $valuesFrom == null or
      $valuesTo == null or
      $sizeFrom == null or
      $sizeTo == null
  ) {
    @error "One of params not settled!!!";
  } @else if (length($valuesFrom) != length($valuesTo)) {
    @error "'valuesFrom' != 'valuesTo' in 'responsiveValue' mixin";
  }

  @for $i from 1 through length($valuesFrom) {
    @if (nth($valuesFrom, $i) == 0 and nth($valuesTo, $i) == 0) {
      $propValue: str-insert($propValue, "0", -1) + " ";
    } @else {
      $propValue:
        str-insert(
          $propValue,
          cssLock(
            nth($valuesFrom, $i),
            nth($valuesTo, $i),
            $sizeFrom,
            $sizeTo
          ),
          -1
      ) + " ";
    }
  }

  @return unquote($propValue);
}


// generates css property for specified values
// usage:
//
// :root {
//   @include responsiveProperty($propName: "--fz54", $breakpoints: (1900: 54, 1100: 45, 768: 35, 350: 20));
// }
// .your-class {
//   font-size: var(--fz54);
// }
//
// or
//
// .your-class {
//   @include responsiveProperty($propName: "font-size", $mediaEntries: (1900: 54, 1100: 45, 768: 35, 350: 20));
//   @include responsiveProperty('padding', (768: (9 15), 375: (6 12)));
// }
//
// @param  {sass array} $mediaEntries: () map list of mediaEntries
// @param  {string} $propName: () name of css property
// @return {css property} property for each breakpoint
@mixin responsiveProperty(
  $propName: null,
  $mediaEntries: ()
) {
  $screenSizes: map-keys($mediaEntries);
  $propValues: map-values($mediaEntries);

  // get map length
  $breakpointsLength: length($screenSizes);

  @if ($propName == null) {
    @error "propName can not be empty!";
  }

  $propValue: "";

  // initial variable value
  #{$propName}: concatValues(nth($propValues, 1));

  // generating media queries
  @for $i from 1 through length($screenSizes) {
    $currentBreakpoint: nth($screenSizes, $i); // current breakpoint
    $currentPropValues: nth($propValues, $i); // value for current breakpoint

    // in case if current key:value pair is not last in map list
    @if ($i != $breakpointsLength) {
      $nextBreakpoint: nth($screenSizes, $i + 1);
      $nextPropValue: nth($propValues, $i + 1);

      @media (max-width: #{$currentBreakpoint}px) {
        #{$propName}:
          responsiveValue(
            $currentPropValues,
            $nextPropValue,
            $currentBreakpoint,
            $nextBreakpoint
          );
      }
    } @else {
      // in case if current key:value pair is last in map list
      // and if last breakpoint is not equal to 320px
      @if ($currentBreakpoint != 320) {
        @media (max-width: #{$currentBreakpoint}px) {
          #{$propName}: concatValues($currentPropValues);
        }
      }
    }
  }
}
