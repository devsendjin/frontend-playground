/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./src/styles/index.scss ***!
  \**********************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
/**
* Sass CSS triangle mixin, create any kind of triangles with ease

* Use:
* @include triangle(direction,width,height,color);

* Example:
* $square: 50px;
* $color: red;
* selector {
*	 @include triangle(bottomright,$square,$square,$color);
* }
*/
/**
 * Как использовать:
 * $gutter - опциональный параметр
 *
 * @include width(7, $gutter);
 * @include pullRight(1);
 * margin-right: $gutter;   or   margin-left: $gutter;
 */
* {
  margin: 0;
  outline: none;
  padding: 0;
}

*,
::before,
::after {
  box-sizing: border-box;
}

/**
 * 1. Add text decoration inheritance in all browsers
 * 2. Add vertical alignment inheritance in all browsers
 */
::before,
::after {
  vertical-align: inherit;
  /* 2 */
  text-decoration: inherit;
  /* 1 */
}

/**
 * 1. Use the default cursor in all browsers (opinionated).
 * 2. Change the line height in all browsers (opinionated).
 * 3. Use a 4-space tab width in all browsers (opinionated).
 * 4. Remove the grey highlight on links in iOS (opinionated).
 * 5. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 * 6. Breaks words to prevent overflow in all browsers (opinionated).
 */
html {
  line-height: 1.5;
  /* 2 */
  word-break: break-word;
  /* 6 */
  -moz-tab-size: 4;
  /* 3 */
  -o-tab-size: 4;
     tab-size: 4;
  /* 3 */
  -ms-text-size-adjust: 100%;
  /* 5 */
  -webkit-text-size-adjust: 100%;
  /* 5 */
  -webkit-tap-highlight-color: transparent;
  cursor: default;
  /* 1 */
}

/**
 * 1. Add the correct sizing in Firefox.
 * 2. Show the overflow in Edge 18- and IE.
 */
hr {
  overflow: visible;
  /* 2 */
  height: 0;
  /* 1 */
}

p {
  margin: 5px 0 10px;
}

a {
  text-decoration: none;
  color: inherit;
  background-color: transparent;
  cursor: pointer;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  /* stylelint-disable-next-line */
  font-weight: bolder;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Remove the border on iframes in all browsers
 */
iframe {
  border-style: none;
}

ul,
ol {
  list-style: none;
}

/**
 * Remove the margin on controls in Safari.
 */
button,
input,
select {
  margin: 0;
}

/**
 * 1. Show the overflow in IE.
 * 2. Remove the inheritance of text transform in Edge 18-, Firefox, and IE.
 */
button {
  overflow: visible;
  /* 1 */
  font-family: inherit;
  text-transform: none;
  /* 2 */
}

input,
textarea {
  border-radius: 0;
  box-shadow: none;
  font-family: inherit;
}
input::-moz-placeholder,
textarea::-moz-placeholder {
  opacity: 1;
}
input:-ms-input-placeholder,
textarea:-ms-input-placeholder {
  opacity: 1;
}
input::-moz-placeholder, textarea::-moz-placeholder {
  opacity: 1;
}
input:-ms-input-placeholder, textarea:-ms-input-placeholder {
  opacity: 1;
}
input::placeholder,
textarea::placeholder {
  opacity: 1;
}

input[type=search]::-webkit-search-cancel-button {
  display: none;
}

[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

/*
 * Change the cursor on disabled, not-editable, or otherwise
 * inoperable elements in all browsers (opinionated).
 */
[disabled] {
  cursor: not-allowed;
}

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-moz-placeholder {
  color: inherit;
  opacity: 0.54;
}
:-ms-input-placeholder {
  color: inherit;
  opacity: 0.54;
}
::placeholder {
  color: inherit;
  opacity: 0.54;
}

/**
 * Remove the inner padding in Chrome, Edge, and Safari on macOS.
 */
::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style upload buttons in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
 * Remove the inner border and padding of focus outlines in Firefox.
 */
::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
 * Remove the additional :invalid styles in Firefox.
 */
:-moz-ui-invalid {
  box-shadow: none;
}

/*
 * Add the correct styles in Edge 18-, IE, and Safari.
 */
dialog {
  position: absolute;
  left: 0;
  right: 0;
  display: block;
  margin: auto;
  border: solid;
  padding: 1em;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  color: #000;
  background-color: #fff;
}

dialog:not([open]) {
  display: none;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/*
 * 1. Remove the tapping delay in IE 10.
 * 2. Remove the tapping delay on clickable elements
      in all browsers (opinionated).
 */
a,
area,
button,
input,
label,
select,
summary,
textarea,
[tabindex] {
  /* 1 */
  touch-action: manipulation;
  /* 2 */
}

/*
 * Pre-formatted and code-formatted text uses the monospace system font
 */
code,
kbd,
pre,
samp {
  font-family: "Menlo", "Fira Code", "Cascadia Code", "Consolas", "Inconsolata", "Monaco", "Roboto Mono", "Droid Sans Mono", "Ubuntu Mono", "Ubuntu Monospace", "Source Code Pro", "Noto Mono", "Oxygen Mono", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary,
svg {
  display: block;
}

/**
 * Change the fill color to match the text color in all browsers (opinionated).
 */
svg:not([fill]) {
  fill: currentColor;
}

html,
body {
  height: 100%;
}

body {
  position: relative;
  font-family: "Montserrat", system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, sans-serif, "Segoe UI", "Roboto", "Ubuntu", "Cantarell", "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  font-weight: 400;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: 16px;
  line-height: 1.6;
  color: #000;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY3NzL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7QUFBQSxnQkFBZ0I7QUNpUmhCOzs7Ozs7Ozs7Ozs7Q0FBQTtBQW1FQTs7Ozs7OztFQUFBO0FDcFZBO0VBQ0U7RUFDQTtFQUNBO0FGdUJGOztBRXBCQTs7O0VBR0U7QUZ1QkY7O0FFcEJBOzs7RUFBQTtBQUlBOztFQUVFO0VBQXlCO0VBQ3pCO0VBQTBCO0FGeUI1Qjs7QUV0QkE7Ozs7Ozs7O0VBQUE7QUFTQTtFQUNFO0VBQWtCO0VBQ2xCO0VBQXdCO0VBQ3hCO0VBQWtCO0VBQ2xCO0tBQUE7RUFBYTtFQUNiO0VBQTRCO0VBQzVCO0VBQWdDO0VBQ2hDO0VBQ0E7RUFBaUI7QUZnQ25COztBRTdCQTs7O0VBQUE7QUFJQTtFQUNFO0VBQW1CO0VBQ25CO0VBQVc7QUZrQ2I7O0FFL0JBO0VBQ0U7QUZrQ0Y7O0FFL0JBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7QUZrQ0Y7O0FFL0JBOztFQUFBO0FBR0E7O0VBRUU7RUFDQTtBRmtDRjs7QUUvQkE7O0VBQUE7QUFHQTtFQUNFO0FGa0NGOztBRS9CQTs7RUFBQTtBQUdBO0VBQ0U7QUZrQ0Y7O0FFL0JBOztFQUVFO0FGa0NGOztBRS9CQTs7RUFBQTtBQUdBOzs7RUFHRTtBRmtDRjs7QUUvQkE7OztFQUFBO0FBSUE7RUFDRTtFQUFtQjtFQUNuQjtFQUNBO0VBQXNCO0FGb0N4Qjs7QUVqQ0E7O0VBRUU7RUFDQTtFQUNBO0FGb0NGO0FDcEhDOztFQ21GRztBRjZDSjtBQzdIQzs7RUNnRkc7QUZpREo7QUM5SEM7RUM2RUc7QUZxREo7QUNsSUM7RUM2RUc7QUZxREo7QUNsSUM7O0VDNkVHO0FGcURKOztBRWpEQTtFQUNFO0FGb0RGOztBRWpEQTs7O0VBR0U7RUFDQTtFQUNBO0FGb0RGOztBRWpEQTs7O0VBQUE7QUFJQTtFQUNFO0FGb0RGOztBRWpEQTs7RUFBQTtBQUdBO0VBQ0U7RUFDQTtBRm9ERjtBRXREQTtFQUNFO0VBQ0E7QUZvREY7QUV0REE7RUFDRTtFQUNBO0FGb0RGOztBRWpEQTs7RUFBQTtBQUdBO0VBQ0U7QUZvREY7O0FFakRBOzs7RUFBQTtBQUlBO0VBQ0U7RUFBNEI7RUFDNUI7RUFBZTtBRnNEakI7O0FFbkRBOztFQUFBO0FBR0E7RUFDRTtFQUNBO0FGc0RGOztBRW5EQTs7RUFBQTtBQUdBO0VBQ0U7QUZzREY7O0FFbkRBOztFQUFBO0FBR0E7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQUE7RUFBQTtFQUNBO0VBQUE7RUFBQTtFQUNBO0VBQ0E7QUZzREY7O0FFbkRBO0VBQ0U7QUZzREY7O0FFbkRBOztFQUFBO0FBR0E7RUFDRTtBRnNERjs7QUVuREE7Ozs7RUFBQTtBQUtBOzs7Ozs7Ozs7RUFTa0M7RUFDaEM7RUFBNEI7QUZ3RDlCOztBRXJEQTs7RUFBQTtBQUdBOzs7O0VBSUUsdVdDak9BO0FIeVJGOztBRXJEQTs7Ozs7Ozs7Ozs7OztFQWFFO0FGd0RGOztBRXJEQTs7RUFBQTtBQUdBO0VBQ0U7QUZ3REY7O0FJdlRBOztFQUVFO0FKMFRGOztBSXZUQTtFQUNFO0VBQ0EsbVFEOEJhO0VDN0JiO0VBQ0E7RUFDQTtFQUNBLGVENEJrQjtFQzNCbEI7RUFDQSxXRDZCTTtBSDZSUixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaHRtbC8uL3NyYy9zdHlsZXMvaW5kZXguc2NzcyIsIndlYnBhY2s6Ly9odG1sLy4uL3NoYXJlZC9zdHlsZXMvYWJzdHJhY3RzL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly9odG1sLy4uL3NoYXJlZC9zdHlsZXMvY29yZS9fcmVzZXQuc2NzcyIsIndlYnBhY2s6Ly9odG1sLy4uL3NoYXJlZC9zdHlsZXMvYWJzdHJhY3RzL19jb25maWcuc2NzcyIsIndlYnBhY2s6Ly9odG1sLy4uL3NoYXJlZC9zdHlsZXMvY29yZS9fYmFzZS5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIkBjaGFyc2V0IFwiVVRGLThcIjtcbi8qKlxuKiBTYXNzIENTUyB0cmlhbmdsZSBtaXhpbiwgY3JlYXRlIGFueSBraW5kIG9mIHRyaWFuZ2xlcyB3aXRoIGVhc2VcblxuKiBVc2U6XG4qIEBpbmNsdWRlIHRyaWFuZ2xlKGRpcmVjdGlvbix3aWR0aCxoZWlnaHQsY29sb3IpO1xuXG4qIEV4YW1wbGU6XG4qICRzcXVhcmU6IDUwcHg7XG4qICRjb2xvcjogcmVkO1xuKiBzZWxlY3RvciB7XG4qXHQgQGluY2x1ZGUgdHJpYW5nbGUoYm90dG9tcmlnaHQsJHNxdWFyZSwkc3F1YXJlLCRjb2xvcik7XG4qIH1cbiovXG4vKipcbiAqINCa0LDQuiDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Yw6XG4gKiAkZ3V0dGVyIC0g0L7Qv9GG0LjQvtC90LDQu9GM0L3Ri9C5INC/0LDRgNCw0LzQtdGC0YBcbiAqXG4gKiBAaW5jbHVkZSB3aWR0aCg3LCAkZ3V0dGVyKTtcbiAqIEBpbmNsdWRlIHB1bGxSaWdodCgxKTtcbiAqIG1hcmdpbi1yaWdodDogJGd1dHRlcjsgICBvciAgIG1hcmdpbi1sZWZ0OiAkZ3V0dGVyO1xuICovXG4qIHtcbiAgbWFyZ2luOiAwO1xuICBvdXRsaW5lOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxuXG4qLFxuOjpiZWZvcmUsXG46OmFmdGVyIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLyoqXG4gKiAxLiBBZGQgdGV4dCBkZWNvcmF0aW9uIGluaGVyaXRhbmNlIGluIGFsbCBicm93c2Vyc1xuICogMi4gQWRkIHZlcnRpY2FsIGFsaWdubWVudCBpbmhlcml0YW5jZSBpbiBhbGwgYnJvd3NlcnNcbiAqL1xuOjpiZWZvcmUsXG46OmFmdGVyIHtcbiAgdmVydGljYWwtYWxpZ246IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0O1xuICAvKiAxICovXG59XG5cbi8qKlxuICogMS4gVXNlIHRoZSBkZWZhdWx0IGN1cnNvciBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqIDIuIENoYW5nZSB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKiAzLiBVc2UgYSA0LXNwYWNlIHRhYiB3aWR0aCBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqIDQuIFJlbW92ZSB0aGUgZ3JleSBoaWdobGlnaHQgb24gbGlua3MgaW4gaU9TIChvcGluaW9uYXRlZCkuXG4gKiA1LiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluXG4gKiAgICBJRSBvbiBXaW5kb3dzIFBob25lIGFuZCBpbiBpT1MuXG4gKiA2LiBCcmVha3Mgd29yZHMgdG8gcHJldmVudCBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqL1xuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxLjU7XG4gIC8qIDIgKi9cbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcbiAgLyogNiAqL1xuICAtbW96LXRhYi1zaXplOiA0O1xuICAvKiAzICovXG4gIHRhYi1zaXplOiA0O1xuICAvKiAzICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiA1ICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogNSAqL1xuICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBjdXJzb3I6IGRlZmF1bHQ7XG4gIC8qIDEgKi9cbn1cblxuLyoqXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3Qgc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIDE4LSBhbmQgSUUuXG4gKi9cbmhyIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIC8qIDIgKi9cbiAgaGVpZ2h0OiAwO1xuICAvKiAxICovXG59XG5cbnAge1xuICBtYXJnaW46IDVweCAwIDEwcHg7XG59XG5cbmEge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cbmIsXG5zdHJvbmcge1xuICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpZnJhbWVzIGluIGFsbCBicm93c2Vyc1xuICovXG5pZnJhbWUge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbnVsLFxub2wge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIG9uIGNvbnRyb2xzIGluIFNhZmFyaS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5zZWxlY3Qge1xuICBtYXJnaW46IDA7XG59XG5cbi8qKlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gKiAyLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UgMTgtLCBGaXJlZm94LCBhbmQgSUUuXG4gKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xuICAvKiAxICovXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbiAgLyogMiAqL1xufVxuXG5pbnB1dCxcbnRleHRhcmVhIHtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG59XG5pbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcixcbnRleHRhcmVhOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgb3BhY2l0eTogMTtcbn1cbmlucHV0Oi1tb3otcGxhY2Vob2xkZXIsXG50ZXh0YXJlYTotbW96LXBsYWNlaG9sZGVyIHtcbiAgb3BhY2l0eTogMTtcbn1cbmlucHV0OjotbW96LXBsYWNlaG9sZGVyLFxudGV4dGFyZWE6Oi1tb3otcGxhY2Vob2xkZXIge1xuICBvcGFjaXR5OiAxO1xufVxuaW5wdXQ6LW1zLWlucHV0LXBsYWNlaG9sZGVyLFxudGV4dGFyZWE6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgb3BhY2l0eTogMTtcbn1cbmlucHV0OjpwbGFjZWhvbGRlcixcbnRleHRhcmVhOjpwbGFjZWhvbGRlciB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbmlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cblt0eXBlPWJ1dHRvbl0sXG5bdHlwZT1yZXNldF0sXG5bdHlwZT1zdWJtaXRdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qXG4gKiBDaGFuZ2UgdGhlIGN1cnNvciBvbiBkaXNhYmxlZCwgbm90LWVkaXRhYmxlLCBvciBvdGhlcndpc2VcbiAqIGlub3BlcmFibGUgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cbltkaXNhYmxlZF0ge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHRleHQgc3R5bGUgb2YgcGxhY2Vob2xkZXJzIGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAqL1xuOjpwbGFjZWhvbGRlciB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBvcGFjaXR5OiAwLjU0O1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cbjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgdXBsb2FkIGJ1dHRvbnMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgb2YgZm9jdXMgb3V0bGluZXMgaW4gRmlyZWZveC5cbiAqL1xuOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgYWRkaXRpb25hbCA6aW52YWxpZCBzdHlsZXMgaW4gRmlyZWZveC5cbiAqL1xuOi1tb3otdWktaW52YWxpZCB7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG59XG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3Qgc3R5bGVzIGluIEVkZ2UgMTgtLCBJRSwgYW5kIFNhZmFyaS5cbiAqL1xuZGlhbG9nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogYXV0bztcbiAgYm9yZGVyOiBzb2xpZDtcbiAgcGFkZGluZzogMWVtO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gIGNvbG9yOiAjMDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG5kaWFsb2c6bm90KFtvcGVuXSkge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKlxuICogMS4gUmVtb3ZlIHRoZSB0YXBwaW5nIGRlbGF5IGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSB0YXBwaW5nIGRlbGF5IG9uIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgICAgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cbmEsXG5hcmVhLFxuYnV0dG9uLFxuaW5wdXQsXG5sYWJlbCxcbnNlbGVjdCxcbnN1bW1hcnksXG50ZXh0YXJlYSxcblt0YWJpbmRleF0ge1xuICAtbXMtdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIC8qIDEgKi9cbiAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247XG4gIC8qIDIgKi9cbn1cblxuLypcbiAqIFByZS1mb3JtYXR0ZWQgYW5kIGNvZGUtZm9ybWF0dGVkIHRleHQgdXNlcyB0aGUgbW9ub3NwYWNlIHN5c3RlbSBmb250XG4gKi9cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IFwiTWVubG9cIiwgXCJGaXJhIENvZGVcIiwgXCJDYXNjYWRpYSBDb2RlXCIsIFwiQ29uc29sYXNcIiwgXCJJbmNvbnNvbGF0YVwiLCBcIk1vbmFjb1wiLCBcIlJvYm90byBNb25vXCIsIFwiRHJvaWQgU2FucyBNb25vXCIsIFwiVWJ1bnR1IE1vbm9cIiwgXCJVYnVudHUgTW9ub3NwYWNlXCIsIFwiU291cmNlIENvZGUgUHJvXCIsIFwiTm90byBNb25vXCIsIFwiT3h5Z2VuIE1vbm9cIiwgXCJMaWJlcmF0aW9uIE1vbm9cIiwgXCJEZWphVnUgU2FucyBNb25vXCIsIFwiQml0c3RyZWFtIFZlcmEgU2FucyBNb25vXCIsIG1vbm9zcGFjZSwgXCJBcHBsZSBDb2xvciBFbW9qaVwiLCBcIlNlZ29lIFVJIEVtb2ppXCIsIFwiU2Vnb2UgVUkgU3ltYm9sXCIsIFwiTm90byBDb2xvciBFbW9qaVwiO1xufVxuXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnksXG5zdmcge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gKiBDaGFuZ2UgdGhlIGZpbGwgY29sb3IgdG8gbWF0Y2ggdGhlIHRleHQgY29sb3IgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cbnN2Zzpub3QoW2ZpbGxdKSB7XG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcbn1cblxuaHRtbCxcbmJvZHkge1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbmJvZHkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQtZmFtaWx5OiBcIk1vbnRzZXJyYXRcIiwgc3lzdGVtLXVpLCAtYXBwbGUtc3lzdGVtLCBcIlNlZ29lIFVJXCIsIFwiUm9ib3RvXCIsIFwiVWJ1bnR1XCIsIFwiQ2FudGFyZWxsXCIsIFwiTm90byBTYW5zXCIsIHNhbnMtc2VyaWYsIFwiQXBwbGUgQ29sb3IgRW1vamlcIiwgXCJTZWdvZSBVSSBFbW9qaVwiLCBcIlNlZ29lIFVJIFN5bWJvbFwiLCBcIk5vdG8gQ29sb3IgRW1vamlcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDEuNjtcbiAgY29sb3I6ICMwMDA7XG59IiwiQG1peGluIGRlYnVnKCRjb2xvcjogI2RkZCApIHtcbiAgb3V0bGluZTogMXB4IHNvbGlkICRjb2xvcjtcbn1cblxuQG1peGluIHZpc3VhbGx5LWhpZGRlbiB7XG5cdGNsaXA6IHJlY3QoMCAwIDAgMCk7XG5cdGNsaXAtcGF0aDogaW5zZXQoNTAlKTtcblx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRoZWlnaHQ6IDFweDtcblx0d2lkdGg6IDFweDtcbn1cblxuQG1peGluIHVuc2VsZWN0YWJsZSB7XG5cdC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTsgLy8gaU9TIFNhZmFyaVxuXHQtd2Via2l0LXVzZXItc2VsZWN0OiBub25lOyAgIC8vIENocm9tZS9TYWZhcmkvT3BlcmFcblx0LWtodG1sLXVzZXItc2VsZWN0OiBub25lOyAgICAvLyBLb25xdWVyb3Jcblx0LW1vei11c2VyLXNlbGVjdDogbm9uZTsgICAgICAvLyBGaXJlZm94XG5cdC1tcy11c2VyLXNlbGVjdDogbm9uZTsgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIvRWRnZVxuXHR1c2VyLXNlbGVjdDogbm9uZTsgICAgICAgICAgIC8vIE5vbi1wcmVmaXhlZCB2ZXJzaW9uXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBwbGFjZWhvbGRlciB3aXRoIHByZWZpeFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiBwbGFjZWhvbGRlciB7XG5cdCY6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xuXHRcdEBjb250ZW50XG5cdH1cblx0JjotbW96LXBsYWNlaG9sZGVyIHtcblx0XHRAY29udGVudFxuXHR9XG5cdCY6Oi1tb3otcGxhY2Vob2xkZXIge1xuXHRcdEBjb250ZW50XG5cdH1cblx0JjotbXMtaW5wdXQtcGxhY2Vob2xkZXIge1xuXHRcdEBjb250ZW50XG5cdH1cblx0Jjo6cGxhY2Vob2xkZXIge1xuXHRcdEBjb250ZW50XG5cdH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIHN2ZyBiYWNrZ3JvdW5kXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuQG1peGluIHN2Z2JnKCR3aWR0aDogMCwgJGhlaWdodDogMCwgJHVybDogJycpIHtcbiAgY29udGVudDogJyc7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHdpZHRoOiAkd2lkdGg7XG4gIGhlaWdodDogJGhlaWdodDtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR1cmwpO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEZvbnQgRmFjZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiBmb250LWZhY2UoXG5cdCRuYW1lLFxuXHQkcGF0aCxcblx0JGxvY2FsczogbnVsbCxcblx0JHdlaWdodDogbnVsbCxcblx0JHN0eWxlOiBudWxsLFxuXHQkZXh0czogZW90IHdvZmYyIHdvZmYgdHRmIHN2ZyBvdGZcbikge1xuXHQkc3JjOiBudWxsO1xuXG5cdCRleHRtb2RzOiAoXG5cdFx0ZW90OiBcIj9cIixcblx0XHRzdmc6IFwiI1wiICsgc3RyLXJlcGxhY2UoJG5hbWUsIFwiIFwiLCBcIl9cIilcblx0KTtcblxuXHQkZm9ybWF0czogKFxuXHRcdG90ZjogXCJvcGVudHlwZVwiLFxuXHRcdHR0ZjogXCJ0cnVldHlwZVwiXG5cdCk7XG5cblx0QGlmICgkbG9jYWxzICE9IG51bGwpIHtcblx0XHRAZWFjaCAkbG9jYWwgaW4gJGxvY2FscyB7XG5cdFx0XHQkc3JjOiBhcHBlbmQoJHNyYywgbG9jYWwocXVvdGUoJGxvY2FsKSksIGNvbW1hKTtcblx0XHR9XG5cdH1cblxuXHRAZWFjaCAkZXh0IGluICRleHRzIHtcblx0XHQkZXh0bW9kOiBpZihtYXAtaGFzLWtleSgkZXh0bW9kcywgJGV4dCksICRleHQgKyBtYXAtZ2V0KCRleHRtb2RzLCAkZXh0KSwgJGV4dCk7XG5cdFx0JGZvcm1hdDogaWYobWFwLWhhcy1rZXkoJGZvcm1hdHMsICRleHQpLCBtYXAtZ2V0KCRmb3JtYXRzLCAkZXh0KSwgJGV4dCk7XG5cdFx0JHNyYzogYXBwZW5kKCRzcmMsIHVybChxdW90ZSgkcGF0aCArIFwiLlwiICsgJGV4dG1vZCkpIGZvcm1hdChxdW90ZSgkZm9ybWF0KSksIGNvbW1hKTtcblx0fVxuXG5cdEBmb250LWZhY2Uge1xuXHRcdGZvbnQtZmFtaWx5OiBxdW90ZSgkbmFtZSk7XG5cdFx0Zm9udC1zdHlsZTogJHN0eWxlO1xuXHRcdGZvbnQtd2VpZ2h0OiAkd2VpZ2h0O1xuXHRcdGZvbnQtZGlzcGxheTogc3dhcDtcblx0XHRzcmM6ICRzcmM7XG5cdH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGdyYWRpZW50IGJhY2tncm91bmQtaW1hZ2Vcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5AbWl4aW4gYmdpKCRjb2xvcjogIzAwMDAwMCwgJGhlaWdodDogMXB4LCAkYm90dG9tOiAwKSB7XG5cdGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byB0b3AsIHRyYW5zcGFyZW50ICRib3R0b20sICRjb2xvciAkYm90dG9tLCAkY29sb3IgJGhlaWdodCskYm90dG9tLCB0cmFuc3BhcmVudCAkaGVpZ2h0KyRib3R0b20pO1xufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gdW5kZXJsaW5lIGFuaW1hdGlvblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiB1bmRlcmxpbmUtZW5kLXN0YXRlKFxuXHQkYmdTaXplWDogMTAwJSxcblx0JGJnU2l6ZVk6IDEwMCUsXG5cdCRiZ1BvczogbGVmdCxcblx0JGJlaGF2aW9yOiBudWxsLFxuXHQkdHJzUHJvcHM6IG51bGwsXG5cdCR0cnNEdXJhdGlvbjogbnVsbFxuKSB7XG5cdGJhY2tncm91bmQtcG9zaXRpb246ICRiZ1Bvcztcblx0QGlmICgkYmVoYXZpb3IgPT0gbnVsbCkge1xuXHRcdGJhY2tncm91bmQtc2l6ZTogJGJnU2l6ZVggJGJnU2l6ZVk7XG5cdH1cblx0QGlmICgkYmVoYXZpb3IgPT0gc2hvdy1vbi1ob3Zlcikge1xuXHRcdGJhY2tncm91bmQtc2l6ZTogMTAwJSAkYmdTaXplWTtcblx0fVxuXHRAaWYgKCRiZWhhdmlvciA9PSByZW1vdmUtb24taG92ZXIpIHtcblx0XHRiYWNrZ3JvdW5kLXNpemU6IDAgJGJnU2l6ZVk7XG5cdH1cblx0QGlmICgkdHJzUHJvcHMgIT0gbnVsbCkge1xuXHRcdHRyYW5zaXRpb24tcHJvcGVydHk6IHVucXVvdGUoJHRyc1Byb3BzKTtcblx0fVxuXHRAaWYgKCR0cnNEdXJhdGlvbiAhPSBudWxsKSB7XG5cdFx0dHJhbnNpdGlvbi1kdXJhdGlvbjogJHRyc0R1cmF0aW9uO1xuXHR9XG59XG5cbkBtaXhpbiB1bmRlcmxpbmUtc3RhcnQtc3RhdGUoXG5cdCRjb2xvcjogIzAwMDAwMCxcblx0JGJnU2l6ZVg6IDAsXG5cdCRiZ1NpemVZOiAxMDAlLFxuXHQkYmdQb3M6IGxlZnQsXG5cdCR0cnNQcm9wczogYmFja2dyb3VuZC1zaXplLFxuXHQkdHJzRHVyYXRpb246IC4zcyxcblx0JGJlaGF2aW9yOiBudWxsLFxuXHQkaGVpZ2h0OiAxcHgsXG5cdCRib3R0b206IDBcbikge1xuXHRAaW5jbHVkZSBiZ2koJGNvbG9yLCAkaGVpZ2h0LCAkYm90dG9tKTtcblx0YmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcblx0YmFja2dyb3VuZC1wb3NpdGlvbjogJGJnUG9zO1xuXHR0cmFuc2l0aW9uLXByb3BlcnR5OiB1bnF1b3RlKCR0cnNQcm9wcyk7XG5cdHRyYW5zaXRpb24tZHVyYXRpb246ICR0cnNEdXJhdGlvbjtcblxuXHRAaWYgKCRiZWhhdmlvciA9PSBudWxsKSB7XG5cdFx0YmFja2dyb3VuZC1zaXplOiAkYmdTaXplWCAkYmdTaXplWTtcblx0fVxuXHRAaWYgKCRiZWhhdmlvciA9PSBzaG93LW9uLWhvdmVyKSB7XG5cdFx0YmFja2dyb3VuZC1zaXplOiAwICRiZ1NpemVZO1xuXHR9XG5cblx0QGlmICgkYmVoYXZpb3IgPT0gcmVtb3ZlLW9uLWhvdmVyKSB7XG5cdFx0YmFja2dyb3VuZC1zaXplOiAxMDAlICRiZ1NpemVZO1xuXHR9XG59XG5cbkBtaXhpbiB1bmRlcmxpbmUoXG5cdCRjb2xvcjogIzAwMDAwMCxcblx0JGJnU2l6ZVg6IDAsXG5cdCRiZ1NpemVZOiAxMDAlLFxuXHQkYmdQb3M6IGxlZnQsXG5cdCR0cnNQcm9wczogYmFja2dyb3VuZC1zaXplLFxuXHQkdHJzRHVyYXRpb246IC4zcyxcblx0JGJlaGF2aW9yOiBzaG93LW9uLWhvdmVyLFxuXHQkaGVpZ2h0OiAxcHgsXG5cdCRib3R0b206IDBcbikge1xuXHRAaW5jbHVkZSB1bmRlcmxpbmUtc3RhcnQtc3RhdGUoJGNvbG9yLCAkYmdTaXplWCwgJGJnU2l6ZVksICRiZ1BvcywgJHRyc1Byb3BzLCAkdHJzRHVyYXRpb24sICRiZWhhdmlvciwgJGhlaWdodCwgJGJvdHRvbSk7XG5cdCYuaG92ZXIsICY6aG92ZXIge1xuXHRcdEBpbmNsdWRlIHVuZGVybGluZS1lbmQtc3RhdGUoJGJnU2l6ZVgsICRiZ1NpemVZLCAkYmdQb3MsICRiZWhhdmlvcik7XG5cdH1cbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIG1ha2Ugc2Nyb2xsIGJhciBpbnZpc2libGUsIGJ1dCBzdGlsbCB3b3JraW5nXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuQG1peGluIGludmlzaWJsZVNjcm9sbGJhciB7XG5cdC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTsgLyogSW50ZXJuZXQgRXhwbG9yZXIgMTArICovXG5cdHNjcm9sbGJhci13aWR0aDogbm9uZTsgLyogRmlyZWZveCAqL1xuXHQmOjotd2Via2l0LXNjcm9sbGJhciB7XG5cdFx0ZGlzcGxheTogbm9uZTsgLyogU2FmYXJpIGFuZCBDaHJvbWUgKi9cblx0XHR3aWR0aDogMDtcblx0XHRoZWlnaHQ6IDA7XG5cdH1cblx0LW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyAvLyBFREdFXG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBjdXN0b20gc2Nyb2xsYmFyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuQG1peGluIGN1c3RvbVNjcm9sbGJhcihcbiAgJHRodW1iQ29sb3I6ICNmY2VlNTgsXG4gICR3aWR0aDogMTZweCxcbiAgJHNjcm9sbGJhckJnOiB0cmFuc3BhcmVudCxcbiAgJGZpcmVmb3hTY3JvbGxiYXJCZzogdHJhbnNwYXJlbnRcbiAgKSB7XG5cdC8vIFN0eWxlcyBmb3IgRmlyZWZveCBub3QgYSBsb3Qgb2Ygb3B0aW9ucyB3ZSBhcmUgYWJsZSB0byBzZXQgZm9yIGN1c3RvbSBzY3JvbGxiYXJzXG4gIC8vIHNjcm9sbGJhci13aWR0aDogdGhpbjsgLy8gbm9uZSB8IHRoaW4gfCBhdXRvXG4gIHNjcm9sbGJhci1jb2xvcjogJHRodW1iQ29sb3IgJGZpcmVmb3hTY3JvbGxiYXJCZztcblxuXHQmOjotd2Via2l0LXNjcm9sbGJhcixcbiAgJjo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2stcGllY2Uge1xuXHQgIHdpZHRoOiAkd2lkdGg7XG5cdCAgYmFja2dyb3VuZDogJHNjcm9sbGJhckJnO1xuXHR9XG5cblx0Jjo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICR0aHVtYkNvbG9yO1xuXHQgIGJvcmRlci1yYWRpdXM6IDA7XG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcblx0ICAvLyBib3JkZXI6IDFweCBzb2xpZCAjZGRkO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kOiBkYXJrZW4oJHRodW1iQ29sb3IsIDEwJSk7XG4gICAgfVxuXG4gICAgJjphY3RpdmUge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2VuKCR0aHVtYkNvbG9yLCAyMCUpO1xuICAgIH1cblx0fVxuXG5cdC8vICY6Oi13ZWJraXQtc2Nyb2xsYmFyLWNvcm5lciB7XG5cdC8vICAgYmFja2dyb3VuZDogIzAwMDtcblx0Ly8gfVxufVxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gcmVzZXQgYnV0dG9uIHN0eWxlc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiByZXNldEJ0bigkYmdjOiB0cmFuc3BhcmVudCkge1xuXHRib3JkZXI6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cdGJhY2tncm91bmQtY29sb3I6ICRiZ2M7XG5cdGFwcGVhcmFuY2U6IG5vbmU7XG5cdGN1cnNvcjogcG9pbnRlcjtcblx0Jjo6LW1vei1mb2N1cy1pbm5lciB7XG5cdFx0Ym9yZGVyOiAwO1xuXHR9XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyByZXNldCB0ZXh0IHN0eWxlc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiByZXNldFRleHQoJGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmKSB7XG5cdGZvbnQtZmFtaWx5OiAkZm9udC1mYW1pbHk7XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcblx0bGluZS1icmVhazogYXV0bztcblx0bGluZS1oZWlnaHQ6IDEuNTtcblx0dGV4dC1hbGlnbjogbGVmdDtcblx0dGV4dC1kZWNvcmF0aW9uOiBub25lO1xuXHR0ZXh0LXNoYWRvdzogbm9uZTtcblx0dGV4dC10cmFuc2Zvcm06IG5vbmU7XG5cdHdoaXRlLXNwYWNlOiBub3JtYWw7XG5cdHdvcmQtYnJlYWs6IG5vcm1hbDtcblx0d29yZC1zcGFjaW5nOiBub3JtYWw7XG5cdHdvcmQtd3JhcDogbm9ybWFsO1xufVxuXG5cbi8qKlxuKiBTYXNzIENTUyB0cmlhbmdsZSBtaXhpbiwgY3JlYXRlIGFueSBraW5kIG9mIHRyaWFuZ2xlcyB3aXRoIGVhc2VcblxuKiBVc2U6XG4qIEBpbmNsdWRlIHRyaWFuZ2xlKGRpcmVjdGlvbix3aWR0aCxoZWlnaHQsY29sb3IpO1xuXG4qIEV4YW1wbGU6XG4qICRzcXVhcmU6IDUwcHg7XG4qICRjb2xvcjogcmVkO1xuKiBzZWxlY3RvciB7XG4qXHQgQGluY2x1ZGUgdHJpYW5nbGUoYm90dG9tcmlnaHQsJHNxdWFyZSwkc3F1YXJlLCRjb2xvcik7XG4qIH1cbiovXG5AbWl4aW4gdHJpYW5nbGUoJGRpcmVjdGlvbiwgJHNpemVILCAkc2l6ZVYsICRjb2xvcil7XG5cdGNvbnRlbnQ6ICcnO1xuXHRkaXNwbGF5OiBibG9jaztcblx0d2lkdGg6IDA7XG5cdGhlaWdodDogMDtcblx0Ym9yZGVyLXN0eWxlOiBzb2xpZDtcblx0LW1vei10cmFuc2Zvcm06IHNjYWxlKC45OTk5KTtcblxuXHRAaWYgJGRpcmVjdGlvbiA9PSB0b3Age1xuXHRcdGJvcmRlci13aWR0aDogMCAkc2l6ZVYgJHNpemVIICRzaXplVjtcblx0XHRib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvciB0cmFuc3BhcmVudDtcblx0fVxuXHRAaWYgJGRpcmVjdGlvbiA9PSBib3R0b217XG5cdFx0Ym9yZGVyLXdpZHRoOiAkc2l6ZVYgJHNpemVIIDAgJHNpemVWO1xuXHRcdGJvcmRlci1jb2xvcjogJGNvbG9yIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuXHR9XG5cdEBpZiAkZGlyZWN0aW9uID09IGxlZnR7XG5cdFx0Ym9yZGVyLXdpZHRoOiAkc2l6ZVYgJHNpemVIICRzaXplViAwO1xuXHRcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgJGNvbG9yIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuXHR9XG5cdEBpZiAkZGlyZWN0aW9uID09IHJpZ2h0e1xuXHRcdGJvcmRlci13aWR0aDogJHNpemVWIDAgJHNpemVWICRzaXplSDtcblx0XHRib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICRjb2xvcjtcblx0fVxuXHRAaWYgJGRpcmVjdGlvbiA9PSB0b3ByaWdodHtcblx0XHRib3JkZXItd2lkdGg6IDAgJHNpemVIICRzaXplViAwO1xuXHRcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgJGNvbG9yIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50O1xuXHR9XG5cdEBpZiAkZGlyZWN0aW9uID09IGJvdHRvbXJpZ2h0e1xuXHRcdGJvcmRlci13aWR0aDogMCAwICRzaXplSCAkc2l6ZVY7XG5cdFx0Ym9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAkY29sb3IgdHJhbnNwYXJlbnQ7XG5cdH1cblx0QGlmICRkaXJlY3Rpb24gPT0gYm90dG9tbGVmdHtcblx0XHRib3JkZXItd2lkdGg6ICRzaXplSCAwIDAgJHNpemVWO1xuXHRcdGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgdHJhbnNwYXJlbnQgJGNvbG9yO1xuXHR9XG5cdEBpZiAkZGlyZWN0aW9uID09IHRvcGxlZnR7XG5cdFx0Ym9yZGVyLXdpZHRoOiAkc2l6ZUggJHNpemVWIDAgMDtcblx0XHRib3JkZXItY29sb3I6ICRjb2xvciB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcblx0fVxufVxuXG4vL9Cf0YDQuNC90YbQuNC/INGA0LDQsdC+0YLRiyDRgdC10YLQutC4OiAo0L7Qv9C40YHQsNC90LjQtSDRhNGD0L3QutGG0LjQuCBjYWxjV2lkdGgpXG4vL9Cy0LXQt9C00LUg0L7RgtC90LjQvNCw0LXQvCBcIi0xXCIg0YIu0LouINC/0L7RgdC70LUg0L/QvtGB0LvQtdC00L3QtdC5INC60L7Qu9C+0L3QutC4INC90LXRgiDQvtGC0YHRgtGD0L/QsFxuLy8xMDAlIC0gKCN7JGd1dHRlcn0gKiAoI3skY29sdW1uc30gLSAxKSkgIC0gINCy0YvRh9C40YHQu9GP0LXQvCDRgdGD0LzQvNGDINGI0LjRgNC40L0g0LLRgdC10YUg0LrQvtC70L7QvdC+0Log0YLQtdC60YPRidC10LPQviDQutC+0L3RgtC10LnQvdC10YDQsCDQsdC10Lcg0L7RgtGB0YLRg9C/0L4g0LzQtdC20LTRgyDQutC+0LvQvtC90LrQsNC80Lhcbi8vMTAwJSAtICg80L7RgtGB0YLRg9C/INC80LXQttC00YMg0LrQvtC70L7QvdC60LDQvNC4PiAqIDzQvtCx0YnQtdC1INC60L7Quy3QstC+INC60L7Qu9C+0L3QvtC6PiAtIDwxINC60L7Qu9C+0L3QutCwPikpXG4vL1xuLy8oKDEwMCUgLSAoI3skZ3V0dGVyfSAqICgjeyRjb2x1bW5zfSAtIDEpKSkgLyAjeyRjb2x1bW5zfSkgIC0gINCy0YvRh9C40YHQu9GP0LXQvCDRiNC40YDQuNC90YMgMS3QuSDQutC+0LvQvtC90LrQuCDQsdC10Lcg0L7RgtGB0YLRg9C/0L7QsiDQvNC10LbQtNGDINC60L7Qu9C+0L3QutCw0LzQuFxuLy8xMDAlIC0gKDzQvtGC0YHRgtGD0L8g0LzQtdC20LTRgyDQutC+0LvQvtC90LrQsNC80Lg+ICogKDzQvtCx0YnQtdC1INC60L7Quy3QstC+INC60L7Qu9C+0L3QvtC6PiAtIDwxINC60L7Qu9C+0L3QutCwPikpIC8gPNC+0LHRidC10LUg0LrQvtC7LdCy0L4g0LrQvtC70L7QvdC+0Lo+XG4vL1xuLy9jYWxjKCgoMTAwJSAtICgjeyRndXR0ZXJ9ICogKCN7JGNvbHVtbnN9IC0gMSkpKSAvICN7JGNvbHVtbnN9KSAqICN7JG51bX0gKyAjeyRndXR0ZXJ9ICogKCN7JG51bX0gLSAxKSArICN7JGd1dHRlclNoaWZ0fSkgIC0gINGB0YfQuNGC0LDQtdC8INGI0LjRgNC40L3RgyDQutC+0LvQvtC90L7QuiDQsdC70L7QutCwICsg0L7RgtGB0YLRg9C/0Ysg0LzQtdC20LTRg1xuLy8g0LrQvtC70L7QvdC60LDQvNC4ICsg0LTQvtCx0LDQstC70Y/QtdC8INC+0YLRgdGC0YPQv9GLINC80LXQttC00YMg0LrQvtC70L7QutCw0LzQuCwg0LXRgdC70Lgg0L3Rg9C20L3QviDRgdC00LLQuNC90YPRgtGMINCx0LvQvtC6XG4vLyAoMTAwJSAtICg80L7RgtGB0YLRg9C/INC80LXQttC00YMg0LrQvtC70L7QvdC60LDQvNC4PiAqIDzQvtCx0YnQtdC1INC60L7Quy3QstC+INC60L7Qu9C+0L3QvtC6PiAtIDwxINC60L7Qu9C+0L3QutCwPikpIC8gPNC+0LHRidC10LUg0LrQvtC7LdCy0L4g0LrQvtC70L7QvdC+0Lo+ICogPNGC0YDQtdCx0YPQtdC80L7QtSDQutC+0Lst0LLQviDQutC+0LvQvtC90L7Quj4gKyA80L7RgtGB0YLRg9C/PiAqICg80YLRgNC10LHRg9C10LzQvtC1INC60L7Quy3QstC+INC60L7Qu9C+0L3QvtC6PiAtIDwxINC60L7Qu9C+0L3QutCwPiArIDzQvtGC0YHRgtGD0L8g0LzQtdC20LTRgyDQutC+0LvQvtC90LrQsNC80Lgo0LzQvtC20LXRgiDQsdGL0YLRjCDQvtGC0YDQuNGG0LDRgtC10LvRjNC90YvQuSk+KVxuXG4vKipcbiAqINCa0LDQuiDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Yw6XG4gKiAkZ3V0dGVyIC0g0L7Qv9GG0LjQvtC90LDQu9GM0L3Ri9C5INC/0LDRgNCw0LzQtdGC0YBcbiAqXG4gKiBAaW5jbHVkZSB3aWR0aCg3LCAkZ3V0dGVyKTtcbiAqIEBpbmNsdWRlIHB1bGxSaWdodCgxKTtcbiAqIG1hcmdpbi1yaWdodDogJGd1dHRlcjsgICBvciAgIG1hcmdpbi1sZWZ0OiAkZ3V0dGVyO1xuICovXG5cbkBmdW5jdGlvbiBjYWxjV2lkdGgoXG4gICRudW0sXG4gICRndXR0ZXJTaGlmdDogMHB4LFxuICAkY29sdW1uczogJGNvbHVtbnMsXG4gICRndXR0ZXI6ICRndXR0ZXJcbikge1xuXHRAcmV0dXJuIGNhbGMoKCgxMDAlIC0gKCN7JGd1dHRlcn0gKiAoI3skY29sdW1uc30gLSAxKSkpIC8gI3skY29sdW1uc30pICogI3skbnVtfSArICN7JGd1dHRlcn0gKiAoI3skbnVtfSAtIDEpICsgI3skZ3V0dGVyU2hpZnR9KTtcbn1cblxuLy8g0YjQuNGA0LjQvdCwINC60L7Qu9C+0L3QutC4XG5AbWl4aW4gd2lkdGgoXG4gICRudW0sXG4gICRndXR0ZXJTaGlmdDogMHB4LFxuICAkY29sdW1uczogJGNvbHVtbnMsXG4gICRndXR0ZXI6ICRndXR0ZXJcbikge1xuXHR3aWR0aDogY2FsY1dpZHRoKCRudW0sICRndXR0ZXJTaGlmdCwgJGNvbHVtbnMsICRndXR0ZXIpO1xufVxuXG4vLyRwcm9wZXJ0eSAtINC30LDQtNCw0ZHQvCDQuNC70LggbWFyZ2luINC40LvQuCBwYWRkaW5nLCDQv9C+INGD0LzQvtC70YfQsNC90LjRjiBtYXJnaW5cbi8vINC00L7QsdCw0LLQu9GP0LXQvCDQvtGC0YHRgtGD0L8g0YHQu9C10LLQsFxuQG1peGluIHB1bGxMZWZ0KFxuICAkbnVtLFxuICAkZ3V0dGVyU2hpZnQ6IDBweCxcbiAgJHByb3BlcnR5OiBtYXJnaW4sXG4gICRjb2x1bW5zOiAkY29sdW1ucyxcbiAgJGd1dHRlcjogJGd1dHRlclxuKSB7XG5cdCN7JHByb3BlcnR5fS1sZWZ0OiBjYWxjV2lkdGgoJG51bSwgJGd1dHRlclNoaWZ0LCAkY29sdW1ucywgJGd1dHRlcik7XG59XG5cbi8vJHByb3BlcnR5IC0g0LfQsNC00LDRkdC8INC40LvQuCBtYXJnaW4g0LjQu9C4IHBhZGRpbmcsINC/0L4g0YPQvNC+0LvRh9Cw0L3QuNGOIG1hcmdpblxuLy8g0LTQvtCx0LDQstC70Y/QtdC8INC+0YLRgdGC0YPQvyDRgdC/0YDQsNCy0LBcbkBtaXhpbiBwdWxsUmlnaHQoXG4gICRudW0sXG4gICRndXR0ZXJTaGlmdDogMHB4LFxuICAkcHJvcGVydHk6IG1hcmdpbixcbiAgJGNvbHVtbnM6ICRjb2x1bW5zLFxuICAkZ3V0dGVyOiAkZ3V0dGVyXG4pIHtcblx0I3skcHJvcGVydHl9LXJpZ2h0OiBjYWxjV2lkdGgoJG51bSwgJGd1dHRlclNoaWZ0LCAkY29sdW1ucywgJGd1dHRlcik7XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBjdXN0b20gZmxleC1ib3ggZ3JpZFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiBncmlkLXJvdygkb2Zmc2V0OiAkb2Zmc2V0KXtcblx0ZGlzcGxheTogZmxleDtcbiAgZmxleC13cmFwOiB3cmFwO1xuXHRtYXJnaW4tbGVmdDogKCRvZmZzZXQgLyAtMik7XG5cdG1hcmdpbi1yaWdodDogKCRvZmZzZXQgLyAtMik7XG59XG5cbkBtaXhpbiBncmlkLWNvbCgkb2Zmc2V0OiAkb2Zmc2V0KXtcblx0bWFyZ2luLWxlZnQ6ICgkb2Zmc2V0IC8gMik7XG5cdG1hcmdpbi1yaWdodDogKCRvZmZzZXQgLyAyKTtcbn1cblxuQG1peGluIGdyaWQtc2l6ZSgkbiwgJGNvbHVtbnM6ICRjb2x1bW5zLCAkb2Zmc2V0OiAkb2Zmc2V0KXtcblx0d2lkdGg6ICN7Y2FsYygxMDAlIC8gI3skY29sdW1uc30gKiAjeyRufSAtICN7JG9mZnNldH0pfTtcbn1cblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIGRldGVjdCBJRTEwIGFuZCBhYm92ZVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbkBtaXhpbiBJRTEwdXAoKXtcblx0QG1lZGlhIHNjcmVlbiBhbmQgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpLCBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSkge1xuXHRcdEBjb250ZW50O1xuXHR9XG59XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBjZW50ZXJpbmdcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5AbWl4aW4gY2VudGVyKCRheGlzOiAneHknKSB7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0QGlmICRheGlzID09ICd4eScge1xuXHRcdHRvcDogNTAlO1xuXHRcdGxlZnQ6IDUwJTtcblx0XHR0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcblx0fSBAZWxzZSBpZiAkYXhpcyA9PSAneScge1xuXHRcdHRvcDogNTAlO1xuXHRcdHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcblx0fSBAZWxzZSBpZiAkYXhpcyA9PSAneCcge1xuXHRcdGxlZnQ6IDUwJTtcblx0XHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG5cdH1cbn1cbiIsIioge1xuICBtYXJnaW46IDA7XG4gIG91dGxpbmU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG59XG5cbiosXG46OmJlZm9yZSxcbjo6YWZ0ZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4vKipcbiAqIDEuIEFkZCB0ZXh0IGRlY29yYXRpb24gaW5oZXJpdGFuY2UgaW4gYWxsIGJyb3dzZXJzXG4gKiAyLiBBZGQgdmVydGljYWwgYWxpZ25tZW50IGluaGVyaXRhbmNlIGluIGFsbCBicm93c2Vyc1xuICovXG46OmJlZm9yZSxcbjo6YWZ0ZXIge1xuICB2ZXJ0aWNhbC1hbGlnbjogaW5oZXJpdDsgLyogMiAqL1xuICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQ7IC8qIDEgKi9cbn1cblxuLyoqXG4gKiAxLiBVc2UgdGhlIGRlZmF1bHQgY3Vyc29yIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICogMi4gQ2hhbmdlIHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqIDMuIFVzZSBhIDQtc3BhY2UgdGFiIHdpZHRoIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICogNC4gUmVtb3ZlIHRoZSBncmV5IGhpZ2hsaWdodCBvbiBsaW5rcyBpbiBpT1MgKG9waW5pb25hdGVkKS5cbiAqIDUuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW5cbiAqICAgIElFIG9uIFdpbmRvd3MgUGhvbmUgYW5kIGluIGlPUy5cbiAqIDYuIEJyZWFrcyB3b3JkcyB0byBwcmV2ZW50IG92ZXJmbG93IGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICovXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuNTsgLyogMiAqL1xuICB3b3JkLWJyZWFrOiBicmVhay13b3JkOyAvKiA2ICovXG4gIC1tb3otdGFiLXNpemU6IDQ7IC8qIDMgKi9cbiAgdGFiLXNpemU6IDQ7IC8qIDMgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDUgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiA1ICovXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQgLyogNCAqLztcbiAgY3Vyc29yOiBkZWZhdWx0OyAvKiAxICovXG59XG5cbi8qKlxuICogMS4gQWRkIHRoZSBjb3JyZWN0IHNpemluZyBpbiBGaXJlZm94LlxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSAxOC0gYW5kIElFLlxuICovXG5ociB7XG4gIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAyICovXG4gIGhlaWdodDogMDsgLyogMSAqL1xufVxuXG5wIHtcbiAgbWFyZ2luOiA1cHggMCAxMHB4O1xufVxuXG5hIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8vIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4vKipcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gKi9cbmIsXG5zdHJvbmcge1xuICAvKiBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpZnJhbWVzIGluIGFsbCBicm93c2Vyc1xuICovXG5pZnJhbWUge1xuICBib3JkZXItc3R5bGU6IG5vbmU7XG59XG5cbnVsLFxub2wge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIG9uIGNvbnRyb2xzIGluIFNhZmFyaS5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5zZWxlY3Qge1xuICBtYXJnaW46IDA7XG59XG5cbi8qKlxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gKiAyLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UgMTgtLCBGaXJlZm94LCBhbmQgSUUuXG4gKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlOyAvKiAxICovXG4gIGZvbnQtZmFtaWx5OiBpbmhlcml0O1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTsgLyogMiAqL1xufVxuXG5pbnB1dCxcbnRleHRhcmVhIHtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cbiAgQGluY2x1ZGUgcGxhY2Vob2xkZXIge1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbiB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cblt0eXBlPVwiYnV0dG9uXCJdLFxuW3R5cGU9XCJyZXNldFwiXSxcblt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAtbW96LWFwcGVhcmFuY2U6IG5vbmU7XG4gIGFwcGVhcmFuY2U6IG5vbmU7XG59XG5cbi8qXG4gKiBDaGFuZ2UgdGhlIGN1cnNvciBvbiBkaXNhYmxlZCwgbm90LWVkaXRhYmxlLCBvciBvdGhlcndpc2VcbiAqIGlub3BlcmFibGUgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cbltkaXNhYmxlZF0ge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuXG4vKipcbiAqIENvcnJlY3QgdGhlIHRleHQgc3R5bGUgb2YgcGxhY2Vob2xkZXJzIGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAqL1xuOjpwbGFjZWhvbGRlciB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICBvcGFjaXR5OiAwLjU0O1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gKi9cbjo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgdXBsb2FkIGJ1dHRvbnMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xuICBmb250OiBpbmhlcml0OyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgb2YgZm9jdXMgb3V0bGluZXMgaW4gRmlyZWZveC5cbiAqL1xuOjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyLXN0eWxlOiBub25lO1xuICBwYWRkaW5nOiAwO1xufVxuXG4vKipcbiAqIFJlbW92ZSB0aGUgYWRkaXRpb25hbCA6aW52YWxpZCBzdHlsZXMgaW4gRmlyZWZveC5cbiAqL1xuOi1tb3otdWktaW52YWxpZCB7XG4gIGJveC1zaGFkb3c6IG5vbmU7XG59XG5cbi8qXG4gKiBBZGQgdGhlIGNvcnJlY3Qgc3R5bGVzIGluIEVkZ2UgMTgtLCBJRSwgYW5kIFNhZmFyaS5cbiAqL1xuZGlhbG9nIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogYXV0bztcbiAgYm9yZGVyOiBzb2xpZDtcbiAgcGFkZGluZzogMWVtO1xuICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gIGhlaWdodDogZml0LWNvbnRlbnQ7XG4gIGNvbG9yOiAjMDAwO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xufVxuXG5kaWFsb2c6bm90KFtvcGVuXSkge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKlxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKlxuICogMS4gUmVtb3ZlIHRoZSB0YXBwaW5nIGRlbGF5IGluIElFIDEwLlxuICogMi4gUmVtb3ZlIHRoZSB0YXBwaW5nIGRlbGF5IG9uIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgICAgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gKi9cbmEsXG5hcmVhLFxuYnV0dG9uLFxuaW5wdXQsXG5sYWJlbCxcbnNlbGVjdCxcbnN1bW1hcnksXG50ZXh0YXJlYSxcblt0YWJpbmRleF0ge1xuICAtbXMtdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247IC8qIDEgKi9cbiAgdG91Y2gtYWN0aW9uOiBtYW5pcHVsYXRpb247IC8qIDIgKi9cbn1cblxuLypcbiAqIFByZS1mb3JtYXR0ZWQgYW5kIGNvZGUtZm9ybWF0dGVkIHRleHQgdXNlcyB0aGUgbW9ub3NwYWNlIHN5c3RlbSBmb250XG4gKi9cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6ICRkZWZhdWx0LXVpLW1vbm9zcGFjZWQtZm9udHM7XG59XG5cbmFydGljbGUsXG5hc2lkZSxcbmRldGFpbHMsXG5maWdjYXB0aW9uLFxuZmlndXJlLFxuZm9vdGVyLFxuaGVhZGVyLFxubWFpbixcbm1lbnUsXG5uYXYsXG5zZWN0aW9uLFxuc3VtbWFyeSxcbnN2ZyB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAqIENoYW5nZSB0aGUgZmlsbCBjb2xvciB0byBtYXRjaCB0aGUgdGV4dCBjb2xvciBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAqL1xuc3ZnOm5vdChbZmlsbF0pIHtcbiAgZmlsbDogY3VycmVudENvbG9yO1xufVxuIiwiJGRlZmF1bHQtdWktY29tbW9uLWZvbnRzOlxuICBcIkFwcGxlIENvbG9yIEVtb2ppXCIsIC8vIG1hY09TIGVtb2ppXG4gIFwiU2Vnb2UgVUkgRW1vamlcIiwgLy8gV2luZG93cyBlbW9qaVxuICBcIlNlZ29lIFVJIFN5bWJvbFwiLCAvLyBXaW5kb3dzIGVtb2ppXG4gIFwiTm90byBDb2xvciBFbW9qaVwiOyAvLyBMaW51eCBlbW9qaVxuXG4kZGVmYXVsdC11aS1tb25vc3BhY2VkLWZvbnRzOlxuICBcIk1lbmxvXCIsIC8vIG1hY09TIDEwLjEwK1xuICBcIkZpcmEgQ29kZVwiLFxuICBcIkNhc2NhZGlhIENvZGVcIixcbiAgXCJDb25zb2xhc1wiLCAvLyBXaW5kb3dzIDYrXG4gIFwiSW5jb25zb2xhdGFcIixcbiAgXCJNb25hY29cIixcbiAgXCJSb2JvdG8gTW9ub1wiLCAvLyBBbmRyb2lkIDQrXG4gIFwiRHJvaWQgU2FucyBNb25vXCIsXG4gIFwiVWJ1bnR1IE1vbm9cIixcbiAgXCJVYnVudHUgTW9ub3NwYWNlXCIsIC8vIFVidW50dSAxMC4xMCtcbiAgXCJTb3VyY2UgQ29kZSBQcm9cIixcbiAgXCJOb3RvIE1vbm9cIiwgLy8gS0RFIFBsYXNtYSA1K1xuICBcIk94eWdlbiBNb25vXCIsIC8vIEtERSBQbGFzbWEgNCtcbiAgXCJMaWJlcmF0aW9uIE1vbm9cIiwgLy8gTGludXgvT3Blbk9mZmljZSBmYWxsYmFja1xuICBcIkRlamFWdSBTYW5zIE1vbm9cIixcbiAgXCJCaXRzdHJlYW0gVmVyYSBTYW5zIE1vbm9cIixcbiAgbW9ub3NwYWNlLCAvLyBmYWxsYmFja1xuICAkZGVmYXVsdC11aS1jb21tb24tZm9udHM7XG5cbiRkZWZhdWx0LXVpLXN5c3RlbS1mb250czpcbiAgc3lzdGVtLXVpLFxuICAtYXBwbGUtc3lzdGVtLCAvLyBtYWNPUyAxMC4xMS0xMC4xMlxuICBcIlNlZ29lIFVJXCIsIC8vIFdpbmRvd3MgNitcbiAgXCJSb2JvdG9cIiwgLy8gQW5kcm9pZCA0K1xuICBcIlVidW50dVwiLCAvLyBVYnVudHUgMTAuMTArXG4gIFwiQ2FudGFyZWxsXCIsIC8vIEdub21lIDMrXG4gIFwiTm90byBTYW5zXCIsIC8vIEtERSBQbGFzbWEgNStcbiAgc2Fucy1zZXJpZiwgLy8gZmFsbGJhY2tcbiAgJGRlZmF1bHQtdWktY29tbW9uLWZvbnRzO1xuXG4kcHJpbWFyeS1mb250OiBcIk1vbnRzZXJyYXRcIiwgJGRlZmF1bHQtdWktc3lzdGVtLWZvbnRzO1xuXG4kZGVmYXVsdC1mb250LXNpemU6IDE2cHg7XG5cbi8vIGNvbG9yc1xuJGJsYWNrOiAjMDAwO1xuXG4vLyB2YXJpYWJsZXMgZm9yIGdyaWQgbWl4aW5zXG4kY29sdW1uczogMTIgIWRlZmF1bHQ7XG4kZ3V0dGVyOiA0MHB4ICFkZWZhdWx0O1xuJG9mZnNldDogMTVweCAhZGVmYXVsdDtcblxuLy8gb3RoZXJcbiR0cnM6IDAuMnMgIWRlZmF1bHQ7IC8vIGRlZmF1bHQgdHJhbnNpdGlvblxuXG4vLyBAaW1wb3J0ICdlYXNpbmdzJztcbkBpbXBvcnQgJ2Z1bmN0aW9ucyc7XG5AaW1wb3J0ICdtaXhpbnMnO1xuQGltcG9ydCAnY3NzLWxvY2snO1xuIiwiaHRtbCxcbmJvZHkge1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbmJvZHkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGZvbnQtZmFtaWx5OiAkcHJpbWFyeS1mb250O1xuICBmb250LXdlaWdodDogNDAwO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcbiAgZm9udC1zaXplOiAkZGVmYXVsdC1mb250LXNpemU7XG4gIGxpbmUtaGVpZ2h0OiAxLjY7XG4gIGNvbG9yOiAkYmxhY2s7XG59XG5cbi8vIC5jb250YWluZXIge1xuLy8gICBtYXJnaW46IDAgYXV0bztcbi8vICAgcGFkZGluZy1yaWdodDogMTVweDtcbi8vICAgcGFkZGluZy1sZWZ0OiAxNXB4O1xuLy8gICBtYXgtd2lkdGg6IDEzMDBweDtcbi8vIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/