@use "sass:math";
@use "sass:meta";

// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
//
// @param {Number} $num - Number to strip unit from.
//
// @returns {Number} The same number, sans unit.
@function strip-unit($value) {
  @if meta.type-of($value) != "number" {
    @error "Invalid `#{meta.type-of($value)}` type. Choose a number type instead.";
  } @else if meta.type-of($value) == "number" and not math.is-unitless($value) {
    @return math.div($value, ($value * 0 + 1));
  }

  @return $value;
}

// String Replace
//
// @param {String} $string - String which the search will be performed in.
// @param {String} $search - Value to search.
// @param {String} $search - Value whitch will be replaced with.
//
// @returns {String} The string with replaced value.
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

/**
 * Reverses the keys and values of a Sass map.
 *
 * @param {map} $map - The map to be reversed.
 * @returns {map} The new map with keys and values reversed.
 *
 * @example
 * // Usage example:
 * $colors: (
 *   red: #ff0000,
 *   blue: #0000ff,
 *   green: #00ff00
 * );
 *
 * $reversed-colors: map-reverse-key-to-value($colors);
 * // Output:
 * // $reversed-colors: (
 * //   #ff0000: red,
 * //   #0000ff: blue,
 * //   #00ff00: green
 * // );
 */
 @function map-reverse-key-to-value($map) {
  @if meta.type-of($map) != "map" {
    @error '"#{$map}" is not a valid map';
  }

  $new-map: ();

  @each $k, $v in $map {
    $new-map: map.set($new-map, $v, $k);
  }

  @return $new-map;
}
